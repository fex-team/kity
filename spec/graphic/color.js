var Color = require('graphic/color');var utils = require('core/utils');describe("Kity.graphic.Color", function() {    describe('实现 Serializable.parse()', function() {        var color;        beforeEach(function() {            color = new Color();        });        it('解析 rgb(r, g, b) 形式的颜色', function() {            color.parse('rgb(12,23, 34)'); // 字符串里的空格是要来保证 parse 方法的容错性            expect(color.get('r')).toBe(12);            expect(color.get('g')).toBe(23);            expect(color.get('b')).toBe(34);        });        it('解析 hex 形式的颜色', function() {            color.parse('#052fA1');            expect(color.get('r')).toBe(0x05);            expect(color.get('g')).toBe(0x2f);            expect(color.get('b')).toBe(0xa1);        });        it('解析 hsl(h, s%, l%) 形式的颜色', function() {            color.parse('hsl(12, 50%, 50%)');            expect(color.get('h')).toBe(12);            expect(color.get('s')).toBe(50);            expect(color.get('l')).toBe(50);        })        it('解析 rgba(r, g, b, a) 形式的颜色', function() {            color.parse('rgba (12,23, 34, .12 )');            expect(color.get('r')).toBe(12);            expect(color.get('g')).toBe(23);            expect(color.get('b')).toBe(34);            expect(color.get('a')).toBe(0.12);        });        it('解析 hsla(h, s%, l%, a) 形式的颜色', function() {            color.parse('hsl(12, 50%, 50%, 0.2)');            expect(color.get('h')).toBe(12);            expect(color.get('s')).toBe(50);            expect(color.get('l')).toBe(50);            expect(color.get('a')).toBe(0.2);        });    });    describe('实现 Serializable.toString()', function() {        var color;        beforeEach(function() {            color =  = new Color().parse('#910131');        });        it('在透明度为1时返回rgb表示', function() {            expect(color.toString()).toBe('RGB(145, 1, 49)');        });        it('在透明度不为1时返回rgba表示', function() {            color.set('a', 0.3);            expect(color.toString()).toBe('RGBA(145, 1, 49, .3)');        });    });    describe('Color.set() 和 Color.get()', function() {        var color;        beforeEach(function() {            color = new Color();        });        it('每个分量都可以设置和获取', function() {            utils.each('rgbhsla'.split(''), function(index, name) {                expect(color.set(name, 1).get(name)).toBe(1);            });        });        it('rgb 值和 hsl 值互相联动更新', function() {            var hsl, rgb;            color.set('r', 12);            hsl = color.toHSL();            color.set('r', 18);            expect(color.toHSL()).not().toBe(hsl);            color.set('h', 12);            rgb = color.toRGB();            color.set('h', 18);            expect(color.toRGB()).not().toBe(rgb);        });    });    describe('Color.increase() 和 Color.descrease()', function() {        var color;        beforeEach(function() {            color = new Color();        });        it('increase 增加分量值', function() {            expect(color.set('r', 10).increase('r', 20).get('r')).toBe(30);        });        it('descrease 减少分量', function() {            expect(color.set('r', 30).descrease('r', 20).get('r')).toBe(10);        });        it('控制溢出', function () {            expect(color.set('r', 200).increase('r', 100).get('r').toBe(255));            expect(color.set('a', 0.5).descrease('a', 1).get('a')).toBe(0);        });    });    describe('Color.toRGB()', function() {        var color = new Color().parse('rgb(12,21,23)');        it('正确输出规范RGB格式', function() {            expect(color.toString()).toBe("RGB(12, 21, 23)");        });    });    descrease('Color.toHEX()', function() {        var color = new Color().parse('#12c26f');        it('正确输出规范HEX格式', function() {            expect(color.toHEX()).toBe('#12C26F');        });    });    descrease('Color.toHSL()', function() {        var color = new Color().parse('hsl (12,23%, 43%)');        it('正确输出规范HEX格式', function() {            expect(color.toHSL()).toBe('HSL(12, 23%, 43%)');        });    });    describe('Color.toRGBA()', function() {        var color = new Color().parse('rgba(12,21,23, .12)');        it('正确输出规范RGBA格式', function() {            expect(color.toString()).toBe("RGBA(12, 21, 23, 0.12)");        });    });        descrease('Color.toHSLA()', function() {        var color = new Color().parse('hsl (12,23%, 43%,.3)');        it('正确输出规范HSLA格式', function() {            expect(color.toHSLA()).toBe('HSLA(12, 23%, 43%, 0.3)');        });    });});